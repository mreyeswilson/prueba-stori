// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	io "io"

	models "github.com/mreyeswilson/prueba_stori/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// ICalculatorService is an autogenerated mock type for the ICalculatorService type
type ICalculatorService struct {
	mock.Mock
}

// MakeSummary provides a mock function with given fields: reader
func (_m *ICalculatorService) MakeSummary(reader *io.Reader) (models.Summary, error) {
	ret := _m.Called(reader)

	if len(ret) == 0 {
		panic("no return value specified for MakeSummary")
	}

	var r0 models.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(*io.Reader) (models.Summary, error)); ok {
		return rf(reader)
	}
	if rf, ok := ret.Get(0).(func(*io.Reader) models.Summary); ok {
		r0 = rf(reader)
	} else {
		r0 = ret.Get(0).(models.Summary)
	}

	if rf, ok := ret.Get(1).(func(*io.Reader) error); ok {
		r1 = rf(reader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICalculatorService creates a new instance of ICalculatorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICalculatorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICalculatorService {
	mock := &ICalculatorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
