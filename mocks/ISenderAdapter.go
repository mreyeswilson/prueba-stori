// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ISenderAdapter is an autogenerated mock type for the ISenderAdapter type
type ISenderAdapter struct {
	mock.Mock
}

// GetIdentities provides a mock function with given fields:
func (_m *ISenderAdapter) GetIdentities() ([]*string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIdentities")
	}

	var r0 []*string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplate provides a mock function with given fields: templateName
func (_m *ISenderAdapter) GetTemplate(templateName string) string {
	ret := _m.Called(templateName)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(templateName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendEmail provides a mock function with given fields: from, to, subject, html
func (_m *ISenderAdapter) SendEmail(from string, to []*string, subject string, html string) error {
	ret := _m.Called(from, to, subject, html)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*string, string, string) error); ok {
		r0 = rf(from, to, subject, html)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISenderAdapter creates a new instance of ISenderAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISenderAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISenderAdapter {
	mock := &ISenderAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
